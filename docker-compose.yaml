version: "3.8"

services:
  postgresql:
    image: postgres:latest
    ports:
      - "5433:5432"
    container_name: scrapper_db
    environment:
      POSTGRES_DB: scrapper_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - backend
    volumes:
      - postgresql:/var/lib/postgresql/data

  liquibase-migrations:
    container_name: migrations
    image: liquibase/liquibase:4.29
    depends_on:
      - postgresql
    command:
      - --searchPath=/changesets
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper_db
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./migrations:/changesets
    networks:
      - backend

  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper:/var/lib/zookeeper/data
    networks:
      - kafka-net

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - broker:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka-net


  bot:
    build: ./bot  # Путь к папке с Dockerfile
    container_name: bot
    restart: unless-stopped
    ports:
      - "8080:8080"  # Проброс порта для доступа с хоста
    environment:
      - TELEGRAM_TOKEN=7950054762:AAG7u2Syl5xEEjxMAzmlGhpWlgX9AOw4gtw
    depends_on:
      - broker
      - redis
     # - scrapper  # Если Scrapper тоже в Docker
    networks:
      - backend
      - kafka-net  # Чтобы видеть Kafka (broker:9092)

volumes:
  postgresql:
  redis:
  zookeeper:
  broker:

networks:
  backend:
    driver: bridge
  kafka-net:
    driver: bridge
