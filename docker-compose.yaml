version: "3.8"
services:
  postgresql:
    image: postgres:latest
    ports:
      - "5433:5432"
    container_name: scrapper_db
    environment:
      POSTGRES_DB: scrapper_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - backend

  liquibase-migrations:
    container_name: migrations
    image: liquibase/liquibase:4.29
    depends_on:
      - postgresql
    command:
      - --searchPath=/changesets
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper_db
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./migrations:/changesets
    networks:
      - backend

  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"

#  redis:
#    image: redis:latest
#    container_name: redis_container
#    environment:
#      - REDIS_PASSWORD=redis
#      - REDIS_USER=user
#      - REDIS_USER_PASSWORD=user_password
#    ports:
#      - "6380:6379"
#    volumes:
#      - ./redisdata:/data
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    command: >
#      sh -c '
#        mkdir -p /usr/local/etc/redis &&
#        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
#        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
#        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
#        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
#        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
#        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
#        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
#      '
#    healthcheck:
#      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    restart: unless-stopped
#    tty: true
#    stdin_open: true


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  backend:
    driver: bridge

