app:
  github:
    github-token: ${GITHUB_TOKEN:} # env variable
    github-url: https://api.github.com/repos/
  stackoverflow:
    key: ${SO_TOKEN_KEY:}
    access-token: ${SO_ACCESS_TOKEN:}
    stack-overflow-url: https://api.stackexchange.com/2.3
  link:
    telegram-bot-uri: "http://bot:8080"
  database-access-type: orm
  message-transport: kafka
  topic: "updated-topic"
  producer-client-id: producerId

scheduler:
  enable: true
  interval: 60000
  force-check-delay: PT10S
  batch-size: 250

webclient:
  timeouts:
    connect-timeout: 10s    # 10 секунды на подключение
    response-timeout: 10s   # 10 секунд на ответ
    global-timeout: 20s     # 10 секунд на весь запрос


resilience4j.retry:
  configs:
    default:
      max-attempts: 3
      wait-duration: 3ms
      retry-exceptions:
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - org.springframework.web.client.HttpServerErrorException
        - org.springframework.web.client.HttpClientErrorException.TooManyRequests
        - java.util.concurrent.TimeoutException
        - java.io.IOException
        - java.net.ConnectException
  instances:
    httpSendUpdate:
      base-config: default
    getFetchDateGitHub:
      base-config: default
    fetchPullRequestGitHub:
      base-config: default
    fetchIssueGitHub:
      base-config: default
    fetchQuestionStackOverFlow:
      base-config: default
    fetchAnswerStackOverFlow:
      base-config: default
    fetchCommentStackOverFlow:
      base-config: default

resilience4j.circuitbreaker:
  configs:
    default:
      sliding-window-type: COUNT_BASED
      sliding-window-size: 1
      minimum-number-of-calls: 1
      failure-rate-threshold: 100
      permitted-number-of-calls-in-half-open-state: 1
      wait-duration-in-open-state: 5s  # Увеличено для production
      record-exceptions:
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.server.ResponseStatusException
  instances:
    tgBotClient:
      base-config: default


bucket4j:
  rate:
    limit:
      capacity: 50      # Максимальное количество запросов
      refill-amount: 50 # Количество токенов для пополнения
      refill-seconds: 60 # Интервал пополнения в секундах (например, 60 = 1 минута)


spring:
  application:
    name: Scrapper

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgresql:5432/scrapper_db
    username: postgres
    password: postgres

  liquibase:
    enabled: false

  jpa:
    #    hibernate:
    #      ddl-auto: validate
    #    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
  kafka:
    bootstrap-servers:  broker:9092
    producer:
      properties:
        spring.json.add.type.headers: false

server:
  port: 8081

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui



management:
  server:
    port: 8091  # Отдельный порт для метрик
    endpoints:
      web:
        exposure:
          include: "*"
        base-path: /actuator


  endpoints:
    web:
      exposure:
        include: "*"  # Открываем все эндпоинты Actuator

    distribution:
      percentiles-histogram:
        http.server.requests: true  # Гистограммы для перцентилей

  prometheus:
    metrics:
      export:
        enabled: true  # Включить экспорт метрик для Prometheus
      web:
        server:
          auto-time-requests: true  # Должен быть здесь!
  metrics:
    tags:
      application: ${spring.application.name}  # Добавляет тег с именем приложения



logging:
  structured:
    format:
      file: ecs
      console: ecs
  level:
    root: INFO
