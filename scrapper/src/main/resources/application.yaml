app:
  github:
    github-token: ${GITHUB_TOKEN:} # env variable
    github-url: https://api.github.com/repos/
  stackoverflow:
    key: ${SO_TOKEN_KEY:}
    access-token: ${SO_ACCESS_TOKEN:}
    stack-overflow-url: https://api.stackexchange.com/2.3
  link:
    telegram-bot-uri: "http://localhost:8080"
  database-access-type: orm
  message-transport: http
  topic: "updated-topic"
  producer-client-id: producerId

scheduler:
  enable: true
  interval: 10000
  force-check-delay: PT10S
  batch-size: 250

webclient:
  timeouts:
    connect-timeout: 10s    # 10 секунды на подключение
    response-timeout: 10s   # 10 секунд на ответ
    global-timeout: 20s     # 10 секунд на весь запрос


resilience4j:
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 3ms
        enable-exponential-backoff: true
        retry-exceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.HttpClientErrorException.TooManyRequests
          - java.util.concurrent.TimeoutException
          - java.io.IOException
          - java.net.ConnectException
    instances:
      updatesPost:
        base-config: default
      getFetchDateGitHub:
        base-config: default
      fetchPullRequestGitHub:
        base-config: default
      fetchIssueGitHub:
        base-config: default
      fetchQuestionStackOverFlow:
        base-config: default
      fetchAnswerStackOverFlow:
        base-config: default
      fetchCommentStackOverFlow:
        base-config: default


bucket4j:
  rate:
    limit:
      capacity: 5      # Максимальное количество запросов
      refill-amount: 5 # Количество токенов для пополнения
      refill-seconds: 60 # Интервал пополнения в секундах (например, 60 = 1 минута)




spring:
  application:
    name: Scrapper

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5433/scrapper_db
    username: postgres
    password: postgres

  liquibase:
    enabled: false

  jpa:
    #    hibernate:
    #      ddl-auto: validate
    #    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
  kafka:
    bootstrap-servers: "localhost:29092"
    producer:
      properties:
        spring.json.add.type.headers: false

server:
  port: 8081

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui

#logging:
#  structured:
#    format:
#      file: ecs
#      console: ecs
#  level:
#    root: INFO

